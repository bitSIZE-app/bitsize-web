// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  emailVerified DateTime?
  image         String?
  name          String
  username      String?       @unique
  bio           String?
  createdAt     DateTime      @default(now())
  bits          BitCard[]
  rebits        RecycledBit[]
  followers     Follows[]     @relation("follower")
  following     Follows[]     @relation("following")
  subscribers   Subscribes[]  @relation("subscriber")
  subscribing   Subscribes[]  @relation("subscribed")
  role          String?       @default("user")
  isVerified    Boolean       @default(false)
  likes         Like[]
  accounts      Account[]
  sessions      Session[]

  @@fulltext([email, username, name])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follows {
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("follower", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Subscribes {
  subscriber   User     @relation("subscribed", fields: [subscriberId], references: [id])
  subscriberId String
  subscribed   User     @relation("subscriber", fields: [subscribedId], references: [id])
  subscribedId String
  crreatedAt   DateTime @default(now())

  @@id([subscriberId, subscribedId])
}

model BitCard {
  id          String        @id @default(cuid())
  author      User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String?
  content     String
  createdAt   DateTime      @default(now())
  deleted     Boolean       @default(false)
  tags        Tag[]
  likes       Like[]
  rebits      RecycledBit[]
  replies     BitCard[]         @relation("replies")
  originalBit BitCard?          @relation("replies", fields: [originalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalId  String?

  @@fulltext([content])
}

model RecycledBit {
  id        String   @id @default(cuid())
  bit       BitCard      @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  isQuote   Boolean  @default(false)
}

model Tag {
  id        String   @id @default(cuid())
  tag       String   @unique
  createdAt DateTime @default(now())
  bits      BitCard[]
}

model Like {
  id        String   @id @default(cuid())
  bit       BitCard      @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}
